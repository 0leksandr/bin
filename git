#!/bin/bash
set -e

key="git-switch"  # MAYBE: update
dir_my_submodules=".git/my-stashed-submodules"

git_real() {
    _transfer "$(_real "$0")" "$@"
}
escape() {
    local value="$1"
    echo "$value" |tr '/' '#'
}
stashes_for() {
    local target="$1"

    target="$(echo "$target" |sed -r 's / \\/ g')"
    #local reg="^(stash@\{([0-9]+)\}): (On $target: $key|On \(no branch\): $key: $target)$"
    for reg in                                            \
        "On [^:]+: $key: $target"                         \
        "On $target: $key" `# for backward compatibility` \
        ; do
        local reg="^(stash@\{([0-9]+)\}): $reg$"
        git_real --no-pager stash list |grep -E "$reg" |sed -r "s#$reg#\1#g"
    done
}
list_submodules() {
    git config --file .gitmodules --get-regexp path |sed -r 's/^[^ ]+ +([^ ]+)$/\1/g'
}
submodules_cleanup() {
    if [ -z "$(ls -A "$dir_my_submodules")" ]; then
        rm -rf "$dir_my_submodules"
    fi
}

nr_args=$#
if [ "${!nr_args}" = "--" ]; then
    nr_args=$((nr_args-1))
fi
n=$nr_args
n1=$((n - 1))
n2=$((n - 2))
if [ $nr_args -ge 2 ]; then
    if [ "${!n1}" = "checkout" ]; then
        source="$(_git-current-branch-or-tag)"
        target="${!n}"

        if [ "$(git_real status --short)" ]; then
            #git_real add .

            message="$key: $source"  # git stash incorrectly identifies branch when new submodule is added
            git_real stash push --include-untracked --message "$message"
        fi

        git_real "$@"

        submodules="$(git_real status --short |sed -r 's#^\?\? +([^ ].*[^/]|[^ /])/?$#\1#g')"
        if [ "$submodules" ]; then
            dir="$dir_my_submodules/$(escape "$source")"
            mkdir -p "$dir"
            echo "$submodules" |while read -r file; do
                mkdir -p "$(dirname "$dir/$file")"
                mv "$file" "$dir/$file"
            done
        fi

        #list_submodules |while read -r submodule; do
        #    rm -rf "$submodule"
        #done
        dir="$dir_my_submodules/$(escape "$target")"
        if [ -d "$dir" ]; then
            cp -a "$dir/." .
            rm -rf "$dir"
            submodules_cleanup
        fi

        stashes_for "$target" |while read -r stash; do
            git_real stash pop "$stash"
            break
        done

        exit 0
    fi
fi
if [ $nr_args -ge 3 ]; then
    if [ "${!n2}" = "branch" ] && [ "${!n1}" = "-d" ]; then
        target="${!n}"
        stashes_for "$target" |while read -r stash; do
            git_real stash drop "$stash"
        done

        dir="$dir_my_submodules/$(escape "$target")"
        if [ -d "$dir" ]; then
            rm -rf "$dir"
            submodules_cleanup
        fi
    fi
fi

#args=""
#for arg in "$@"; do args="$args $(printf "%q" "$arg")"; done
#eval "git_real $args"

git_real "$@"

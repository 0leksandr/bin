#!/bin/bash
set -e
action="$1"

_log "$@"  # TODO: remove

daytime_file="$HOME/_/localhost/http-server/daytime.txt"
daytime_pipe="$HOME/.temp/daytime"
[ -p "$daytime_pipe" ] || mkfifo "$daytime_pipe"

minutes() {
    local _hours=$(date --date="$1" +%-H)
    local _minutes=$(date --date="$1" +%-M)
    printf $((_hours * 60 + _minutes))
}

minutes_to_time() {
    local _hours=$(($1 / 60))
    local _minutes=$(($1 - _hours * 60))
    printf "%02d:%02d" $_hours $_minutes
}

minutes_range_to_timestamps() {
    timestamp() {
        printf "$(date --date="$1" +%s)"
    }

    echo "$(timestamp "$(minutes_to_time $1)")"
    local time_to="$(minutes_to_time $2)"
    if [ $1 -lt $2 ]; then
        echo "$(timestamp "$time_to")"
    else
        echo "$(timestamp "tomorrow $time_to")"
    fi
}

calc_ranges() {
    if [ "$ranges_calculated_on" = "$(date-ft)" ]; then
        return
    else
        ranges_calculated_on="$(date-ft)"
    fi

    local astro="$(hdate                                       \
        --sun                                                  \
        --latitude  $(location latitude)                       \
        --longitude $(location longitude)                      \
        --timezone  $(date +%z |sed -r 's/^\+0([0-9])00$/\1/') \
        2>/dev/null)"
    when() { echo "$astro" |grep "$1" |sed -r "s/^$1: ([0-9]{2}:[0-9]{2})$/\1/" ;}

    sunrise=$(minutes $(when sunrise))
    sunset=$(minutes $(when sunset))

    local _daytimes="
        morning         $((sunrise - 60))      1       x
        day             $((sunrise - 15))      100
        dusk            $((sunset - 45))       100     x
        twilight        $((sunset + 15))       90      x
        evening         $(minutes 22:00)       75
        night           $(minutes 23:00)       50      x
        midnight        $(minutes 00:00)       10      x
        darkness        $(minutes 00:30)       5
    "
    daytimes=""
    transitive_daytimes=""

    local col='([^ ]+)'
    local reg="^ *$col +$col +$col( +x)?$"
    local nr_lines=$(echo "$_daytimes" |wc -l)
    local ii=0
    while [ $ii -lt $nr_lines ]; do
        ii=$((ii + 1))
        local line="$(echo "$_daytimes" |sed "${ii}q;d")"
        if ! echo "$line" |grep -q '^ *$'; then
            _eval() { eval "$(echo "$line" |sed -r "s/$reg/$1/")" ;}
            _eval "\1=\2"
            _eval "daytimes='$daytimes \1'"
            _eval "brightness_\1=\3"
            _eval "if [ '\4' ]; then transitive_daytimes='$transitive_daytimes \1'; fi"
        fi
    done
}
calc_ranges  # TODO: remove function

brightness_for() {
    local daytime="$1"
    local var="brightness_$daytime"
    eval "local brightness=\${$var}"
    printf "$brightness"
}

first() { printf "$daytimes" |sed -r 's/^ *([^ ]+) .*$/\1/' ;}
last() { printf "$daytimes" |sed -r 's/^.* ([^ ]+)$/\1/' ;}
next_after() {
    local daytime="$1"
    if [ "$daytime" = "$(last)" ]; then
        printf "$(first)"
    else
        printf "$daytimes" |sed -r "s/^.* $daytime ([^ ]+).*$/\1/"
    fi
}

nominal() {
    local now=$(minutes "$(date +%T)")
    local prev="$(last)"
    for daytime in $daytimes; do
        if [ "${!prev}" -le $now ] && [ $now -lt "${!daytime}" ]; then
            printf "$prev"
            return
        fi
        if [ "${!daytime}" -lt "${!prev}" ] && [ "${!prev}" -le $now ]; then
            printf "$prev"
            return
        fi
        prev="$daytime"
    done
    echo "cannot calculate nominal" >&2
}
actual() { cat "$daytime_file" |tr -d '\n' ;}

pause_schedule_file="$HOME/.temp/scene-pause-schedule"
schedule_pause() {
    touch "$pause_schedule_file"
}
schedule_resume() {
    rm "$pause_schedule_file"
}
schedule_paused() {
    if [ -f "$pause_schedule_file" ]; then
        return 0
    else
        return 1
    fi
}

bgs_file="$HOME/.temp/backgrounds.txt"
save_bg() {
    local daytime="$1"
    touch "$bgs_file"
    sed -i "/^$daytime:.*\$/d" "$bgs_file"
    echo "$daytime: $(get-background)" >> "$bgs_file"
}

if [[ " $daytimes " =~ " $action " ]]; then
    echo "$action" > "$daytime_pipe"
    exit 0
fi

case "$action" in
    #movie)
    #    schedule_pause
    #    while ! _external-display-connected; do sleep 1; done
    #    if [ "$2" ]; then
    #        light desk "$2"
    #    else
    #        light desk off
    #    fi
    #    light corridor off
    #    sleep 2
    #    brightness set scene 50
    #    run-detached "$0 _monitor-movie"
    #    ;;
    #_monitor-movie)
    #    while _external-display-connected; do sleep 1; done
    #    $0 "$(nominal)"
    #    sleep 1  # avoid race conditions
    #    schedule_resume
    #    ;;
    call)
        schedule_pause
        mic-on
        #light twilight
        brightness set scene 100
        run-detached "$0 _monitor-call"
        ;;
    _monitor-call)
        while [ "$(mic-status)" = "on" ]; do sleep 1; done
        $0 "$(nominal)"
        sleep 1  # avoid race conditions
        schedule_resume
        ;;
    next) $0 "$(next_after "$($0 actual)")" ;;
    actual) echo "$(actual)" ;;
    when)
        current="$($0 actual)"
        for daytime in $daytimes; do
            echo "$daytime: $(minutes_to_time ${!daytime})"  # bash
            if [ "$daytime" = "$current" ]; then
                echo "  now: $(date +"%H:%M")"
            fi
        done
        echo ""
        echo "sunset: $(minutes_to_time $sunset)"
        ;;
    nominal) echo "$(nominal)" ;;
    force-actual) $0 "$(actual)" ;;
    _schedule)
        prev=""
        while :; do
            if schedule_paused; then
                sleep 1
                continue
            fi

            daytime="$(nominal)"

            if [ "$daytime" != "$prev" ]; then
                prev="$daytime"
                echo "$daytime" > "$daytime_pipe"
            fi

            sleep 1
        done
        ;;
#    _server)
#        dir="$(dirname "$daytime_file")"
#
#        # pkill http-server  # kills innocents
#        # pkill "$dir"  # kills itself
#        _fkill -q "$dir"
#
#        port=9473
#        fuser -k $port/tcp ||:
#        eval "http-server $(echo "$dir" |sed -r 's| |\\ |g') -a 127.0.0.1 -p $port --cors='Access-Control-Allow-Origin: *'"
#        # http-server "$(echo "$dir" |sed -r 's| |\\ |g')" -a 127.0.0.1 -p $port --cors='Access-Control-Allow-Origin: *'
#        # http-server $(echo "$dir" |sed -r 's| |\\ |g') -a 127.0.0.1 -p $port --cors='Access-Control-Allow-Origin: *'
#        ;;
    _light)
        daytime="$2"
        next="$(next_after "$daytime")"
        timestamps="$(minutes_range_to_timestamps ${!daytime} ${!next})"  # bash
        daytime_timestamp="$(echo "$timestamps" |sed '1q;d')"
        next_timestamp="$(echo "$timestamps" |sed '2q;d')"

        if [ "$daytime" = "$(last)" ] || [ "$daytime" != "$(nominal)" ]; then
            brightness set scene "$(brightness_for "$daytime")"
        else
            run-detached "brightness transition scene $(brightness_for $daytime) $daytime_timestamp $(brightness_for $next) $next_timestamp"
        fi

        if at-home; then
            transitive=""
            if [ "$daytime" = "$(nominal)" ]; then
                if [[ " $transitive_daytimes " =~ " $daytime " ]]; then  # bash
                    transitive="1"
                fi
            fi
            if [ "$transitive" ]; then
                run-detached "light transition $daytime $daytime_timestamp $next $next_timestamp"
            else
                light "$daytime"
            fi
        fi
        ;;
    _listen_pipe)
        prev="$($0 actual)"
        tail -f "$daytime_pipe" |while read daytime; do
            # MAYBE: parallel

            echo "$daytime" > "$daytime_file"

            # backgrounds
            save_bg "$prev"
            bg="$(cat "$bgs_file" |grep -E "^$daytime:" |sed -r "s/^$daytime: (.*)$/\1/")"
            if [ "$bg" ]; then
                set-background "$bg"
            fi

            # themes
            if [[ " morning day " =~ " $daytime " ]]; then  # bash
                new_theme="'Adapta'"
            else
                new_theme="'Adapta-Nokto'"
            fi
            conf_key="/org/cinnamon/desktop/interface/gtk-theme"
            cur_theme="$(dconf read "$conf_key")"
            if [ "$cur_theme" != "$new_theme" ]; then
                dconf write "$conf_key" "$new_theme"
            fi

            $0 _light "$daytime"

            prev="$daytime"
        done
        ;;
    _all)
        save_bg "$($0 actual)"
        parallel -n "
            $0 _schedule
            $0 _listen_pipe
        "
        ;;
    help) echo "Options: $daytimes call next actual when nominal force-actual" ;;
    *) echo "Options: $daytimes call next actual when nominal force-actual _schedule _light _listen_pipe _all" >&2 ;;
esac

#!/bin/bash
set -e
action="$1"

daytime_file="$(realpath ~/_/localhost/http-server/daytime.txt)"
daytime_pipe="$(realpath ~/.temp/daytime)"
calc_ranges() {
    astro="$(hdate -s -l N$(location latitude) -L E$(location longitude) -z3 2>/dev/null)"
    when () { echo "$astro" |grep "$1" |sed -r "s/^.*$1: ([0-9]{2}:[0-9]{2}).*$/\1/" ;}

    day="$(date -d $(when sunrise) +%s)"
    twilight="$(( $(date -d $(when sunset) +%s) - 45*60 ))"
    evening="$(( $(date -d $(when sunset) +%s) + 15*60 ))"
    night="$(date -d 22:00 +%s)"
}

bgs_file="$HOME/.temp/backgrounds.txt"
function save_bg {
    local daytime="$1"
    touch "$bgs_file"
    sed -i "/^$daytime:.*\$/d" "$bgs_file"
    echo "$daytime: $(get-background)" >> "$bgs_file"
}

case "$action" in
    day|twilight|evening|night) echo "$action" > "$daytime_pipe" ;;
    movie)
        prev="$($0 actual)"
        if [ "$2" ]; then
            bulb "$2"
        fi
        brightness
        while ! _external-display-connected; do sleep 1; done
        sleep 2
        brightness 0.5
        while _external-display-connected; do sleep 1; done
        if [ "$($0 nominal)" = "$prev" ]; then
            $0 light "$prev"
        fi
        ;;
    next)
        case "$($0 actual)" in
            day)      $0 twilight ;;
            twilight) $0 evening  ;;
            evening)  $0 night    ;;
            night)    $0 day      ;;
        esac
        ;;
    actual) cat "$daytime_file" ;;
    when)
        calc_ranges
        for daytime in day twilight evening night; do
            echo "$daytime: $(date -d @${!daytime} +%H:%M)"
        done
        printf "\nsunset: $(when sunset)\n"
        ;;
    nominal)
        calc_ranges

        now=$(date +%s)
        function between {
            if [ $1 -le $now ] && [ $now -lt $2 ]; then
                return 0
            else
                return 1
            fi
        }
        if between $day $twilight ; then
            echo "day"
        elif between $twilight $evening ; then
            echo "twilight"
        elif between $evening $night ; then
            echo "evening"
        else
            echo "night"
        fi
        ;;
    schedule)
        prev=""
        while :; do
            if _external-display-connected; then
                sleep 10
                continue
            fi

            daytime=$($0 nominal)

            if [ "$daytime" != "$prev" ]; then
                prev="$daytime"
                echo "$daytime" > "$daytime_pipe"
            fi

            sleep 1
        done
        ;;
    server)
        dir="$(dirname "$daytime_file")"

        # pkill http-server  # kills innocents
        # pkill "$dir"  # kills itself
        _fkill -q "$dir"

        eval "http-server $(echo "$dir" |sed -r 's| |\\ |g') -a 127.0.0.1 -p 9473 --cors='Access-Control-Allow-Origin: *'"
        # http-server "$(echo "$dir" |sed -r 's| |\\ |g')" -a 127.0.0.1 -p 9473 --cors='Access-Control-Allow-Origin: *'
        # http-server $(echo "$dir" |sed -r 's| |\\ |g') -a 127.0.0.1 -p 9473 --cors='Access-Control-Allow-Origin: *'
        ;;
    light)
        daytime="$2"
        case "$daytime" in
            # TODO: uncomment when in Kyiv
            day)      brightness 100 ;;
            twilight) brightness  75 ;;
            evening)  brightness  50 ;;
            night)    brightness  25 ;;

            #day)      brightness 25 ;;
            #twilight) brightness 20 ;;
            #evening)  brightness 15 ;;
            #night)    brightness 10 ;;
        esac
        if at-home; then
            bulb "$daytime"
        fi
        ;;
    listen_pipe)
        prev="$($0 actual)"
        tail -f "$daytime_pipe" |while read daytime; do
            $0 light "$daytime"
            echo "$daytime" > "$daytime_file"

            # backgrounds
            save_bg "$prev"
            bg="$(cat "$bgs_file" |grep -E "^$daytime:" |sed -r "s/^$daytime: (.*)$/\1/")"
            if [ "$bg" ]; then
                set-background "$bg"
            fi

            prev="$daytime"
        done
        ;;
    all)
        save_bg "$($0 actual)"
        parallel -n "
            $0 schedule
            $0 server
            $0 listen_pipe
        "
        ;;
    help) echo "Options: day twilight evening night movie next actual when nominal" ;;
    *) echo "Options: day twilight evening night movie next actual when nominal schedule server light listen_pipe all" >&2 ;;
esac

#!/bin/bash
set -e
action="$1"

entry="$(date-ft)_$(_rand 1000)"
log (){ echo "$0 $(date-ft) entry[$entry]: $@" >> ~/.temp/scene.txt ;}

daytime_file="$(realpath ~/_/localhost/http-server/daytime.txt)"
daytime_pipe="$(realpath ~/.temp/daytime)"
calc_ranges() {
    if [ "$ranges_calculated_on" = "$(date-ft)" ]; then
        return
    else
        ranges_calculated_on="$(date-ft)"
    fi

    astro="$(hdate                                             \
        --sun                                                  \
        --latitude  N$(location latitude)                      \
        --longitude E$(location longitude)                     \
        --timezone  $(date +%z |sed -r 's/^\+0([0-9])00$/\1/') \
        2>/dev/null)"
    when () { echo "$astro" |grep "$1" |sed -r "s/^.*$1: ([0-9]{2}:[0-9]{2}).*$/\1/" ;}
    _date() { date -d "$1" +%s ;}

    sunrise=$(_date $(when sunrise))
    sunset=$(_date $(when sunset))

    day=$sunrise
    twilight=$(( $sunset - 45*60 ))
    evening=$(( $sunset + 15*60 ))
    night=$(_date "22:00")
    midnight=$(_date "23:00")
}

function nominal {
    calc_ranges
    local now=$(date +%s)
    function between {
        if [ $1 -le $now ] && [ $now -lt $2 ]; then
            return 0
        else
            return 1
        fi
    }
    if between $day $twilight ; then
        printf "day"
    elif between $twilight $evening ; then
        printf "twilight"
    elif between $evening $night ; then
        printf "evening"
    elif between $night $midnight ; then
        printf "night"
    else
        printf "midnight"
    fi
}

bgs_file="$HOME/.temp/backgrounds.txt"
function save_bg {
    local daytime="$1"
    touch "$bgs_file"
    sed -i "/^$daytime:.*\$/d" "$bgs_file"
    echo "$daytime: $(get-background)" >> "$bgs_file"
}

log "@: $@"

case "$action" in
    day|twilight|evening|night|midnight)
        echo "$action" > "$daytime_pipe"
        ;;
    movie)
        while ! _external-display-connected; do sleep 1; done
        prev="$($0 actual)"
        if [ "$2" ]; then
            light desk "$2"
        else
            light desk off
        fi
        light corridor off
        sleep 2
        brightness 0.5
        while _external-display-connected; do sleep 1; done
        $0 "$(nominal)"
        ;;
    next)
        case "$($0 actual)" in
            day)      $0 twilight ;;
            twilight) $0 evening  ;;
            evening)  $0 night    ;;
            night)    $0 midnight ;;
            midnight) $0 day      ;;
        esac
        ;;
    actual) cat "$daytime_file" ;;
    when)
        calc_ranges
        current="$($0 actual)"
        format="+%H:%M"
        for daytime in day twilight evening night midnight; do
            if [ "$daytime" = "$current" ]; then cur=" <"; else cur=""; fi
            echo "$daytime: $(date -d @${!daytime} $format)$cur"
        done
        echo ""
        echo "sunset: $(date -d @$sunset $format)"
        echo "now: $(date $format)"
        ;;
    nominal) echo "$(nominal)" ;;
    schedule)
        prev=""
        while :; do
            if _external-display-connected; then
                sleep 10
                continue
            fi

            daytime="$(nominal)"

            if [ "$daytime" != "$prev" ]; then
                prev="$daytime"
                echo "$daytime" > "$daytime_pipe"
            fi

            sleep 1
        done
        ;;
    server)
        dir="$(dirname "$daytime_file")"

        # pkill http-server  # kills innocents
        # pkill "$dir"  # kills itself
        _fkill -q "$dir"

        eval "http-server $(echo "$dir" |sed -r 's| |\\ |g') -a 127.0.0.1 -p 9473 --cors='Access-Control-Allow-Origin: *'"
        # http-server "$(echo "$dir" |sed -r 's| |\\ |g')" -a 127.0.0.1 -p 9473 --cors='Access-Control-Allow-Origin: *'
        # http-server $(echo "$dir" |sed -r 's| |\\ |g') -a 127.0.0.1 -p 9473 --cors='Access-Control-Allow-Origin: *'
        ;;
    brightness)
        daytime="$2"
        case "$daytime" in
            day)      printf 100 ;;
            twilight) printf  75 ;;
            evening)  printf  50 ;;
            night)    printf  25 ;;
            midnight) printf   5 ;;
        esac
        ;;
    light)
        daytime="$2"
        calc_ranges
        brightness=$($0 brightness "$daytime")
        if [ "$daytime" = "day" ]; then
            brightness       "$brightness"
        else
            brightness --max "$brightness"
        fi
        if at-home; then
            case "$daytime" in
                day)      light corridor day ;;
                night)    light night        ;;
                midnight) light off          ;;
                *)
                    if [ "$daytime" = "$(nominal)" ]; then
                        case "$daytime" in
                            twilight) run-detached "light transition twilight $twilight evening $evening" ;;
                            evening)  run-detached "light transition evening  $evening  night   $night  " ;;
                        esac
                    else
                        now=$(date +%s)
                        case "$daytime" in
                            twilight) run-detached "light transition twilight $now evening $evening" ;;
                            evening)  run-detached "light transition evening  $now night   $night  " ;;
                        esac
                    fi
                    ;;
            esac
        fi
        ;;
    listen_pipe)
        prev="$($0 actual)"
        tail -f "$daytime_pipe" |while read daytime; do
            $0 light "$daytime"
            echo "$daytime" > "$daytime_file"

            # backgrounds
            save_bg "$prev"
            bg="$(cat "$bgs_file" |grep -E "^$daytime:" |sed -r "s/^$daytime: (.*)$/\1/")"
            if [ "$bg" ]; then
                set-background "$bg"
            fi

            prev="$daytime"
        done
        ;;
    all)
        save_bg "$($0 actual)"
        parallel -n "
            $0 schedule
            $0 server
            $0 listen_pipe
        "
        ;;
    help) echo "Options: day twilight evening night midnight movie next actual when nominal" ;;
    *) echo "Options: day twilight evening night midnight movie next actual when nominal schedule server brightness light listen_pipe all" >&2 ;;
esac

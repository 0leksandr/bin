#!/usr/bin/env bash
set -e

# helpers
strip_head() {
    local text="$1"

    local nr_lines="$(echo "$text" |wc -l)"
    echo "$text" |tail --lines="$((nr_lines - 1))"
}
indented() {
    local indent="$1"
    local value="$2"

    echo "$value" |sed -r "s/^/$indent/"
}
nth() {
    local text="$1"
    local column="$2"

    local groups=" *"
    if [ "$column" -gt 1 ]; then
        for _ in $(seq 1 "$((column - 1))"); do
            groups="$groups""[^ ]+ +"
        done
    fi
    echo "$text" |sed -r "s/^$groups([^ ]+) +.*$/\1/"
}
no() {
    case "$1" in
        "")   return 0 ;;
        help) return 0 ;;
        *)    return 1 ;;
    esac
}
keep() {
    local text="$1"

    [ "$text" ] && text="$text. "
    printf "%sPress [enter] to stop" "$text"
    read -r
}
foreach() {
    local indent=${indent:-0}  # Default to 0 if not set
    local prefix

    # Base case: if only one command left, execute it with all accumulated args
    if [ $# -eq 1 ]; then
        local cmd=$1
        # Get all accumulated arguments from the environment
        local _args=("${foreach_args[@]}")
        # Create indentation prefix (2 spaces per level)
        printf -v prefix '%*s' $((indent * 2)) ""
        # Execute the command with all accumulated arguments
        #echo "${prefix}${cmd} ${_args[*]}"  # Show the command being executed
        "$cmd" "${_args[@]}"
        return
    fi

    # Get the current level's variable/function
    local current=$1
    shift

    # Save the current foreach_args to restore later
    local old_foreach_args=("${foreach_args[@]}")

    ## Evaluate the current argument to get the list of items
    #local items=($($current "${old_foreach_args[@]}"))
    # Properly read command output into array without word splitting issues
    local items=()
    while IFS= read -r line; do
        items+=("$line")
    done < <($current "${old_foreach_args[@]}")

    # If no items, return
    if [ ${#items[@]} -eq 0 ]; then
        return
    fi

    # Create indentation prefix for this level
    printf -v prefix '%*s' $((indent * 2)) ""

    # For each item, add it to the args and recurse
    for item in "${items[@]}"; do
        echo "${prefix}${item}"  # Show the current item with proper indentation
        foreach_args=("${old_foreach_args[@]}" "$item")
        indent=$((indent + 1)) foreach "$@"
        indent=$((indent - 1))
    done

    # Restore the old foreach_args
    foreach_args=("${old_foreach_args[@]}")
}
_1() {
    echo "$1"
}

# autocomplete & arguments
args=$*
current_arg_file=/tmp/current-arg
echo 0 > "$current_arg_file"
next_arg() {
    current_arg="$(cat "$current_arg_file")"
    echo "$((current_arg + 1))" > "$current_arg_file"
    reg="^([^ ]+ +){$current_arg}([^ ]+).*$"
    if echo "$args" |grep -Eq "$reg"; then
        echo "$args" |sed -r "s/$reg/\2/"
    fi
}
options() {
    echo "Options: $*"
    exit 0
}
no_more_args() {
    echo>&2 "No more arguments available"
}
read_() {
    local name="$1"
    local default="$2"

    printf "%s: " "$name"
    read -r value

    if [ ! "$value" ]; then
        if [ $# -ge 2 ]; then
            value="$default"
        else
            echo>&2 "$name is required"
            exit 1
        fi
    fi

    eval "$name=$value"
}

# company-specific
service_port() {
    local namespace="$1"
    local container="$2"

    # kubectl get svc --namespace="$namespace" |grep -E "^$container "
    reg="^Port: +[a-z]+ +([0-9]+)/[A-Z]+$"
    kubectl describe service --namespace="$namespace" "$container" \
        |grep -E "$reg"                                            \
        |grep --invert-match metrics                               \
        |sed -r "s#$reg#\1#g"                                      \
    &&:
}
deduplicate_logs_timestamps='s/^(.*@timestamp.*),"@timestamp":[0-9]+([^0-9].*)$/\1\2/g'

# list resources
projects() {
    local projects="$(gcloud projects list)"
    nth "$(strip_head "$projects")" 1
}
clusters() {
    local project="$1"

    local clusters="$(gcloud container clusters --project="$project" list  2>/dev/null)"
    strip_head "$clusters" |sed -r 's/^([^ ]+) +([^ ]+) .*$/\1:\2/g'
}
authenticate() {
    local project="$1"
    local cluster="$2"

    reg='^([^:]+):([^:]+)$'
    local cluster_name="$(echo "$cluster" |sed -r "s/$reg/\1/")"
    local cluster_location="$(echo "$cluster" |sed -r "s/$reg/\2/")"

    gcloud container clusters --project "$project" get-credentials "$cluster_name" --zone "$cluster_location"  2>/dev/null
}
contexts() {
    #kubectx
    #kubectl config get-contexts --output=name

    timeout=3
    #kubectl config get-contexts --output=name | xargs -P 10 -I {} sh -c \
    #    'if kubectl --context="{}" auth can-i list pods --request-timeout='"$timeout"'s &>/dev/null; then echo "{}"; fi'
    kubectl config get-contexts --output=name | xargs -P 10 -I {} sh -c \
        'if timeout '"$timeout"' kubectl --context="{}" auth can-i list pods &>/dev/null; then echo "{}"; fi'
}
namespaces() {
    #kubens
    kubectl get namespaces --output=custom-columns=NAME:.metadata.name --no-headers
}
containers() {
    local namespace="$1"

    kubectl get pods                                                 \
        --namespace="$namespace"                                     \
        --output=custom-columns="CONTAINER:.spec.containers[*].name" \
        --no-headers                                                 \
        |tr ',' '\n'                                                 \
        |sort                                                        \
        |uniq                                                        \
    &&:
}
statuses_all_contexts() {
    #foreach contexts
    for context in $(contexts); do
        echo "context[$context]"
        use_context "$context"
        statuses_all_namespaces
    done
}
statuses_all_namespaces() {
    #kubectl get pods --all-namespaces --field-selector=status.phase!=Running,status.phase!=Succeeded

    local pods="$(                                                      \
        kubectl get pods                                                \
            --all-namespaces                                            \
            |grep -E --invert-match "^([^ ]+ +){3}(Running|Completed) " \
        &&:
    )"
    if [ "$(echo "$pods" |wc -l)" -gt 1 ]; then
        echo "$pods"
    else
        echo "âœ…"
    fi
}
pods_for_namespace_container() {
    local namespace="$1"
    local container="$2"

    [ "$container" = "$any_container" ] && container=".*"
    kubectl get pods                                                                    \
        --namespace="$namespace"                                                        \
        --output=custom-columns="CONTAINER:.spec.containers[*].name,POD:.metadata.name" \
        --no-headers                                                                    \
        |grep -E "^([^ ]+,)?$container(,[^ ]+)? "                                       \
        |sed -r "s/^[^ ]+ +([^ ]+)$/\1/g"                                               \
    &&:
}
hosts() {
    kubectl get ingress --all-namespaces
}

# commands (operations)
current_context() {
    #kubectl config view --minify --output=jsonpath='{..current-context}'
    kubectl config current-context
}
use_context() {
    local context="$1"

    kubectl config use-context "$context" >/dev/null
}
dump_hosts() {
    contexts |while read -r context; do
        echo "$context"
        use_context "$context"
        indented "  " "$(hosts)"
    done
    close >/dev/null
}
telepresence_() {
    telepresence connect
    keep "Telepresence started."
    telepresence quit --stop-daemons
}
port_forward() {
    local namespace="$1"
    local container="$2"

    local pod="$(pods_for_namespace_container "$namespace" "$container" |head --lines=1)"
    local port="$(service_port "$namespace" "$container")"

    kubectl port-forward --namespace="$namespace" "$pod" "$port" || alert "port-forward connection lost"
}
logs() {
    local namespace="$1"
    local container="$2"
    local pod="$3"

    if [ "$pod" ]; then
        #kubectl logs --namespace "$namespace" --container "$container" "$pod"

        local cmd="kubectl logs --namespace $namespace $pod"
        [ "$container" = "$any_container" ] || cmd="$cmd --container $container"
        eval "$cmd"
    else
        local search
        read_ search ".*"

        stern --namespace "$namespace" "$search" ||:
    fi
}
errors() {
    local namespace="$1"
    local container="$2"
    local pod="$3"

    #logs "$namespace" "$container" "$pod" | jq -c 'select(.["log.level"] != "DEBUG" and .["log.level"] != "INFO")'

    declare -A colors=(
        [red]=31
        [green]=32
        [yellow]=33
        [blue]=34
    )
    logs "$namespace" "$container" "$pod" \
        | sed -r "$deduplicate_logs_timestamps" \
        | jq -r '
            select(.["log.level"] != "DEBUG" and .["log.level"] != "INFO") |
            to_entries | map(
                if .key == "message" or .key == "error" or .key == "err" then
                    "\(.key): \u001b[1;'"${colors[red]}"'m\(.value)\u001b[0m"
                else
                    "\(.key): \(.value)"
                end
            ) | join(" | ")
        '
}
execute_all_pods() {
    local namespace="$1"
    local container="$2"

    read_ command

    foreach "_1 $namespace" "_1 $container" pods_for_namespace_container "_1 $command" execute
}
execute() {
    local namespace="$1"
    local container="$2"
    local pod="$3"
    local command="$4"

    [ "$command" ] || read_ command

    kubectl exec --namespace "$namespace" --container "$container" "$pod" -- "$command"
}
login() {
    local namespace="$1"
    local container="$2"
    local pod="$3"

    kubectl exec -it --namespace "$namespace" --container "$container" "$pod" -- "sh"
}
describe() {
    local namespace="$1"
    local pod="$2"

    kubectl describe pod --namespace "$namespace" "$pod"
}
close() {
    #kubectl config delete-context "$(current_context)"
    #kubectl config unset clusters
    kubectl config unset current-context

    rm -f "$current_arg_file"
}

command_hosts="-hosts"
command_current_context="-current-context"
command_authenticate="-authenticate"
command_close="-close"
command_keep="-keep"
command_telepresence="-telepresence"
command_status="-status"
command_logs="-logs"
command_errors="-errors"
command_port_forward="-port-forward"
command_execute_all_pods="-execute-all-pods"
command_execute="-execute"
command_login="-login"
command_describe="-describe"

each_namespace="_each-namespace"
any_container="_any-container"

#gcloud auth login
#kubectl api-resources  # list resource types
:

#<editor-fold desc="context">
context="$(next_arg)"
if no "$context"; then
    options "--command: $command_hosts $command_current_context $command_authenticate $command_status $command_close .context: $(contexts)"
fi
case "$context" in
    "$command_hosts")           dump_hosts            ;;
    "$command_current_context") current_context       ;;
    "$command_status")          statuses_all_contexts ;;
    "$command_close")           close                 ;;
    "$command_authenticate")
        project="$(next_arg)"
        if no "$project"; then
            options ".project: $(projects)"
        fi

        cluster="$(next_arg)"
        if no "$cluster"; then
            options ".cluster: $(clusters "$project")"
        fi

        if [ "$(current_context 2>/dev/null)" != "gke_$project""_$(echo "$cluster"| sed -r 's/^(.+):(.+)$/\2_\1/')" ]; then
            authenticate "$project" "$cluster"
            echo>&2 "authenticated to project[$project]cluster[$cluster]"
        fi
        ;;
    *) continue="1" ;;
esac
if [ "$continue" ]; then
    continue=""
else
    exit 0
fi

if [ "$(current_context 2>/dev/null)" != "$context" ]; then
    use_context "$context"
fi
#</editor-fold>

#<editor-fold desc="namespace">
# kubens
# kubectl config view --minify --output=jsonpath='{..namespace}'
namespace="$(next_arg)"
if no "$namespace"; then
    options "--command: $command_telepresence $command_keep $command_hosts $command_status .namespace: $(namespaces) $each_namespace"
fi
case "$namespace" in
    "$command_telepresence") telepresence_           ;;
    "$command_keep")         keep                    ;;
    "$command_hosts")        hosts                   ;;
    "$command_status")       statuses_all_namespaces ;;
    *)                       continue="1"            ;;
esac
if [ "$continue" ]; then
    continue=""
else
    close
    exit 0
fi
#</editor-fold>

#<editor-fold desc="container">
container="$(next_arg)"
if no "$container"; then
    options "--command: $command_logs $command_errors .container: $(containers "$namespace") $any_container"
fi
case "$container" in
    "$command_logs")   logs "$namespace"   ;;
    "$command_errors") errors "$namespace" ;;
    *)                 continue="1"        ;;
esac
if [ "$continue" ]; then
    continue=""
else
    close
    exit 0
fi
#</editor-fold>

#<editor-fold desc="pod">
pod="$(next_arg)"
if no "$pod"; then
    options "--command: $command_port_forward $command_execute_all_pods .pod: $(pods_for_namespace_container "$namespace" "$container")"
fi
case "$pod" in
    "$command_port_forward")     port_forward "$namespace" "$container"     ;;
    "$command_execute_all_pods") execute_all_pods "$namespace" "$container" ;;
    *)                           continue="1"                               ;;
esac
if [ "$continue" ]; then
    continue=""
else
    close
    exit 0
fi
#</editor-fold>

#<editor-fold desc="command">
command="$(next_arg)"
if no "$command"; then
    options "--command: $command_execute $command_login $command_describe $command_logs $command_errors"
fi
case "$command" in
    "$command_execute")  execute "$namespace" "$container" "$pod" ;;
    "$command_login")    login "$namespace" "$container" "$pod"   ;;
    "$command_describe") describe "$namespace" "$pod"             ;;
    "$command_logs")     logs "$namespace" "$container" "$pod"    ;;
    "$command_errors")   errors "$namespace" "$container" "$pod"  ;;
    *)                   continue="1"                             ;;
esac
if [ "$continue" ]; then
    continue=""
else
    close
    exit 0
fi
#</editor-fold>

close

# [other]
#kubectl get nodes

#columns="NAMESPACE:.metadata.namespace,CONTAINER:.spec.containers[*].name,NODE:.spec.nodeName,POD:.metadata.name"
#script=$(cat <<PYTHON
#    import sys
#    lines = sys.stdin.read().split("\n")
#    keys, headers = lines.pop(0).split("|")
#    def split(line: str) -> list[str]:
#        return list(filter(None, line.split(" ")))
#    keys = split(keys)
#    headers = split(headers)
#    d = {}
#    for line in lines:
#        d2 = d
#        for w in split(line):
#            if w not in d2:
#                d2[w] = {}
#            d2 = d2[w]
#    #def p(v: dict, indent: str) -> None:
#    #    for k in v.keys():
#    #        print(indent + k)
#    #        p(v[k], indent + "  ")
#    #p(d, "    ")
#    for key in keys:
#        if key in d:
#            d = d[key]
#            headers = headers[1:]
#        else:
#            break
#    print(f"_{headers[0].lower()}: " + " ".join(list(d.keys())))
#PYTHON
#)
#script=$(                                    \
#    echo "$script"                           \
#        |sed -r "s/^$(                       \
#            echo "$script"                   \
#                |head --lines=1              \
#                |sed -r "s/^( *)[^ ].*$/\1/" \
#        )//g"                                \
#)
#table="$(kubectl get pods --all-namespaces --output=custom-columns="$columns")"
#options "$(echo "$(next_arg) $(next_arg) $(next_arg) $(next_arg)|$table" |python3 -c "$script")"

#echo "project[$project] cluster_name[$cluster_name] cluster_location[$cluster_location] namespace[$namespace]"
